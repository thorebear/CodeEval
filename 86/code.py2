import argparse

class Card:        
    def __init__(self, s):
        def getVal(v): 
            if v == 'T':
                return 10
            if v == 'J':
                return 11
            if v == 'Q':
                return 12
            if v == 'K':
                return 13
            if v == 'A':
                return 14
            return int(v)
        self.val = getVal(s[0])
        self.col = s[1]

parser = argparse.ArgumentParser(description='Filename.')
parser.add_argument('filename', type=str)

args = parser.parse_args()

def getRank(hand):
    straight = (hand[0].val == hand[1].val - 1 == hand[2].val - 2 ==
                hand[3].val - 3 == hand[4].val - 4)
    flush = all(x.col == hand[0].col for x in hand)
    # Royal straight flush && straight flush:
    if flush and straight:
        if hand[0] == 10:
            return (10, None)
        else:
            return (9, hand[4].val)
    # Four of a kind
    if all(x.val == hand[-1].val
           for x in hand[1:]) or all(x.val == hand[0].val
                                     for x in hand[:-1]):
        return (8, hand[3].val)
    # Full house
    if (all(x.val == hand[-1].val
            for x in hand[2:]) and hand[0].val == hand[1].val) or (
                    all(x.val == hand[0].val for x in hand[:-2]) and hand[3].val == hand[4].val):
        return (7, hand[4].val, hand[0].val)
    if flush:
        return (6, hand[4].val)
    if straight:
        return (5, hand[4].val)
    # Three of a kind
    if all(x.val == hand[-1].val for x in hand[2:]):
        return (4, hand[4].val)
    else:
        if all(x.val == hand[0].val for x in hand[:-2]):
            return (4, hand[0].val)
    # Two pairs:
    if hand[0].val == hand[1].val:
        if hand[2].val == hand[3].val:
            return (3, hand[0].val, hand[3].val, hand[4].val)
        else:
            return (3, hand[0].val, hand[3].val, hand[2].val)
    else:
        if hand[1].val == hand[2].val and hand[3].val == hand[4].val:
            return (3, hand[1].val, hand[3].val, hand[0].val)
    # One pair:
    for idx, x in enumerate((hand[i].val == hand[i+1].val for i in range(0,4))):
        if x:
            a = hand[:idx-1] + hand[idx:]
            return (2, hand[idx].val, a[0].val, a[1].val, a[2].val)

    return (1,hand[0].val, hand[1].val, hand[2].val, hand[3].val, hand[4].val)

    
with open(args.filename) as f:
    line = f.readline()
    while line != "":
        cards = line.split()
        hand1 = [Card(x) for x in cards[0:5]]
        hand2 = [Card(x) for x in cards[5:10]]
        hand1.sort(key=lambda h:h.val)
        hand2.sort(key=lambda h:h.val)
        rank1 = getRank(hand1)
        rank2 = getRank(hand2)
        a = False
        if rank1[0] > rank2[0]:
            print "left"
        else:
            if rank2[0] > rank1[0]:
                print "right"
            else:
                for i in range(1, len(rank1)):
                    if rank1[i] > rank2[i]:
                        print "left"
                        a = True
                        break
                    else:
                        if rank2[i] > rank1[i]:
                            print "right"
                            a = True
                            break
                if not a:
                    print "none"
                                
                                
        line = f.readline()